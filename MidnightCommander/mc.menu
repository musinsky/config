shell_patterns=1

# 2025-01-10
# https://github.com/musinsky/config/blob/master/MidnightCommander/mc.menu
# https://github.com/MidnightCommander/mc/blob/master/misc/mc.menu.in

--- Compress ---
    %view
    printf "Choose any compression method from menu (all with default \
            compression level).\n"

+ ! t t
1   archive and compress the current dir (tar.gz)
    BNDIR=$(basename %d)
    printf "Name of the compressed file (without .tar.gz extension) [$BNDIR]: "
    read TARNAME
    [ "$TARNAME"x = x ] && TARNAME="$BNDIR" # if $TARNAME is empty
    cd .. \
        && tar --format=posix -cf - "$BNDIR" | gzip --verbose --force > "$TARNAME.tar.gz" \
        && chmod 0444 "$TARNAME.tar.gz" \
        && printf "../$TARNAME.tar.gz created\n"

+ ! t t
2   archive and compress the current dir (tar.xz)
    BNDIR=$(basename %d)
    printf "Name of the compressed file (without .tar.xz extension) [$BNDIR]: "
    read TARNAME
    [ "$TARNAME"x = x ] && TARNAME="$BNDIR" # if $TARNAME is empty
    cd .. \
        && tar --format=posix -cf - "$BNDIR" | xz --verbose --force > "$TARNAME.tar.xz" \
        && chmod 0444 "$TARNAME.tar.xz" \
        && printf "../$TARNAME.tar.xz created\n"

+ ! t t
3   archive only the current dir (tar)
    BNDIR=$(basename %d)
    printf "Name of the archived file (without .tar extension) [$BNDIR]: "
    read TARNAME
    [ "$TARNAME"x = x ] && TARNAME="$BNDIR" # if $TARNAME is empty
    cd .. \
        && tar --format=posix -cf "$TARNAME.tar" "$BNDIR" \
        && chmod 0444 "$TARNAME.tar" \
        && printf "../$TARNAME.tar created\n"

=+ f *.tar | f *.tar.gz | f *.tgz | f *.tar.Z | f *.tar.bz2 | f *.tar.xz & t rl & ! t t
x   extract the current compressed tar file to subdirectory
    tar --one-top-level -xvf %f
    # GNU tar 1.28 (2014-07-28) with new option "--one-top-level"

+ t r | t t
g   gzip or gunzip selected file(s)
    for ifile in %s ; do
        case "$ifile" in
            *.gz|*.[zZ]) gzip --verbose --decompress "$ifile";;
            *)           gzip --verbose "$ifile";;
        esac
    done

z   zip selected file(s) or dir(s)
    if [ "%s" = ".." ]; then
        printf "Don't try compress (zip) parent directory '..'\n"
        exit 1
    fi
    PACKUNIQ="pack_$(date +%%F_%%H%%M%%S)" # unique pack name
    printf "Name of the zip file (without .zip extension) [$PACKUNIQ]: "
    read PACKNAME
    [ "$PACKNAME"x = x ] && PACKNAME="$PACKUNIQ" # if $PACKNAME is empty
    zip -r --quiet "$PACKNAME.zip" %s \
        && printf "$PACKNAME.zip created\n" \
        && printf "%u" > /dev/null # files are untagged

7   7z  selected file(s) or dir(s)
    if [ "%s" = ".." ]; then
        printf "Don't try compress (7z) parent directory '..'\n"
        exit 1
    fi
    PACKUNIQ="pack_$(date +%%F_%%H%%M%%S)" # unique pack name
    printf "Name of the 7z file (without .7z extension) [$PACKUNIQ]: "
    read PACKNAME
    [ "$PACKNAME"x = x ] && PACKNAME="$PACKUNIQ" # if $PACKNAME is empty
    7za a -bd -bso0 "$PACKNAME.7z" %s \
        && printf "$PACKNAME.7z created\n" \
        && printf "%u" > /dev/null # files are untagged

--- Utility ---
    %view
    printf "Choose any utility from menu\n"

=+ t t | t d
    # default entry if any tagged/selected file(s) or file=directory
f   determine selected file(s) type (file)
    %view
    TF1=$(mktemp) || exit 1; TF2=$(mktemp) || exit 1
    file --mime-encoding %s > "$TF1"; file --brief %s > "$TF2"
    paste "$TF1" "$TF2" \
        | column --separator $'\t' --output-separator '    ' --table
    rm --force "$TF1" "$TF2"
    # paste <(file --mime-encoding %s) <(file --brief %s) # only bash v5+

=+ ! t t & t n
    # default entry if no tagged/selected file(s) and file=not a directory
i   information about the current file (file + stat)
    %view
    # file %f; FNAME=%f; file "$FNAME"   # be careful with quotes
    # echo "$(basename %f)"; echo "$(basename "$FNAME")"
    printf '%%s   %%s\n\n' "$(file --mime-encoding %f)" "$(file --brief %f)"
    stat %f; printf '\n'
    FSIZE_NUM="$(stat --format '%%s' %f)"
    FSIZE_CHAR="$(numfmt "$FSIZE_NUM" --to=iec-i --suffix='B' --format='%%.2f')"
    [ "$FSIZE_NUM" -lt 1024 ] && \
        FSIZE_CHAR="$(numfmt "$FSIZE_NUM" --to=iec-i --suffix='B' --format='%%.0f')"
    FSIZE_CHAR="$(echo "$FSIZE_CHAR" | sed -E 's/([A-Z])/ \1/')" # 123KiB => 123 KiB
    printf "  Size: %%s = %%'.0f bytes = %%s" "$FSIZE_NUM" "$FSIZE_NUM" "$FSIZE_CHAR"
    FSIZE_CHAR="$(numfmt "$FSIZE_NUM" --to=iec)"   # same as 'ls --human-readable'
    printf ' (default round from zero = %%s)\n' "$FSIZE_CHAR"
    FMODIFY="$(stat --format '%%Y' %f)"   # seconds since Epoch
    printf 'Modify: %%s' "$(date --date="@$FMODIFY" '+%%F %%T %%:z')"
    printf ' (%%s)\n' "$(LC_TIME=C date --date="@$FMODIFY")" # 07:33 PM => 19:33
    printf '        %%s (UTC)\n' "$(date --utc --date="@$FMODIFY" '+%%F %%T %%:z')"

+ ! t t & t r
e   detect encoding of the current file (uchardet + enca)
    %view
    printf            "file      => "; file --mime %f
    command -v uchardet > /dev/null \
        && { printf "\nuchardet  => "; head --lines=999 %f | uchardet; }
    command -v enca > /dev/null \
        && { # TODO write extra shell script "convert.text.to.utf8.sh"
             # enca --version | grep --quiet '+iconv-interface' => '--iconv-name'
             printf "\nenca (sk) => "; enca --language=sk --iconv-name %f;
             printf   "enca (ru) => "; enca --language=ru --iconv-name %f; }

-   find non-portable filename in the current dir (grep)
    %view{nroff}
    # nroff "force" format mode (F9 toggle the format/unformat mode)
    printf "Non-portable filename in dir '%d'\n"
    printf "Find with 'grep' ([^A-Za-z0-9/._-] only ASCII) in _\bc_\bo_\bl_\bo_\br\n"
    printf "=======================================================\n"
    G_COLOR='\x1b\[31m' # SGR color
    G_RESET='\x1b\[m'   # SGR reset
    G_UNDER='_\x08'     # underline (overstriking with backspace)
    find %d -type f | GREP_COLORS='mt=31:ne' grep --color=always -P '[^A-Za-z0-9/._-]' \
        | sed -e "s/$G_COLOR/$G_UNDER/g" -e "s/$G_RESET//g"

-   find non-portable filename in the current dir (pathchk)
    %view
    pathchk --portability "123456789@12345" 2>&1 \
        | grep 'portable' > /dev/null || { printf "wrong test\n"; exit 1; }
    # since coreutils 9.4 (2023-08) 'nonportable' changed to 'non-portable'
    printf "Non-portable filename in dir '%d'\n"
    printf "Find with 'pathchk' (exclude _POSIX_NAME_MAX 14 limitation)\n"
    printf "===========================================================\n"
    find %d -type f -printf '"%%p"\n' \
        | xargs pathchk --portability 2>&1 | grep --invert-match 'limit'

+ ! t t
-   rename (translit) file/dir to portable name
    command -v translit.rename.sh > /dev/null \
        || { printf "'translit.rename.sh' script not found\n";
             exit 1; }
    translit.rename.sh %p

+ ! t t & t d
-   dir(s) timestamp (recursively) to latest file timestamp
    [ "%p" = ".." ] && { printf "Don't try with parent directory '..'\n"; exit 1; }
    # exclude hidden paths (i.e. directories or files)
    find %p -depth -type d -not -path '*/\.*' -exec sh -c \
         'touch -r "$0/$(ls -tL "$0" | head -n 1)" "$0"' \
         {} \;
    printf 'Done\n'

+ ! t t & t r & ! T t & T r
d   compare current two files from two panels (diff + cmp)
    %view{nroff}
    FILE1=%d/%f; FILE2=%D/%F
    printf 'file:\t%%s\t# size:\t%%s\nfile:\t%%s\t# size:\t%%s\n' \
           "$FILE1" "$(stat --format '%%s' "$FILE1")" \
           "$FILE2" "$(stat --format '%%s' "$FILE2")" \
        | column --separator $'\t' --table --table-columns A,B,C,D,E \
                 --table-right B,D --table-noheadings
    DIFFER='_\bd_\bi_\bf_\bf_\be_\br_\be_\bn_\bt'
    printf '\ndiff: files are '
    if diff "$FILE1" "$FILE2" >/dev/null; then
        printf 'identical\n'; else printf '%%b\n' "$DIFFER"; fi
    printf 'cmp:  files are '
    if cmp --quiet "$FILE1" "$FILE2" 2>&1; then
        printf 'identical\n'; else printf '%%b\n' "$DIFFER"; fi

+ ! t t & t r & ! T t & T r
-   diff current two files from two panels (meld)
    FILE1=%d/%f; FILE2=%D/%F
    meld "$FILE1" "$FILE2"

+ ! t t & ! T t
-   recursive diff current two dirs from two panels (meld)
    meld %d %D

=+ ! t t & t n
r   find rpm package that owns the current file
    %view{nroff}
    if FRPM=$(rpm --query --file %p); then
        printf "file: %%s\nrpm:  %%s\n\n" %d/%p "$FRPM"
        printf "=== package information ===\n"
        rpm --query --info "$FRPM"
        # printf "\n=== list files in package ===\n"
        # rpm --query --list "$FRPM"
    else
        printf "%%s\n" "$FRPM" # file XYZ is not owned by any package
    fi
# r   dnf provides (find rpm package of the current file)
#     SKIPDIR="$(dirname "$HOME")"   # '/home' ('/user/home' or '/afs/cern.ch/user/m')
#     if [ $EUID -eq 0 ]; then   # if root user
#         SKIPDIR="$(sed --quiet 's/^HOME=//p' /etc/default/useradd)"   # '/home'
#     fi
#     WORKDIR="$(pwd -P)"   # avoid all symlinks (without trailing slash)
#     FILE="$WORKDIR/%p"
#     if [[ "$WORKDIR" == "$SKIPDIR"* ]]; then   # must be double brackets (only bash)
#         printf "\nFile '%%s' from '%%s' dir (not in rpm package)\n" "$FILE" "$SKIPDIR"
#         read -n 1 -r -s -p "Press any key"
#         exit 1
#     fi
#     printf '\n\x1b[1m$ dnf provides %%s\x1b[0m\n' "$FILE"
#     dnf provides "$FILE"
#     read -n 1 -r -s -p "Press any key"

--- ExifTool ---
    %view
    command -v exiftool > /dev/null \
        || { printf "first must install 'exiftool'\n";
             printf "$ dnf install perl-Image-ExifTool   # on Fedora/CentOS\n";
             exit 1; }
    printf "https://exiftool.org/exiftool_pod.html\n"

-   view all timestamp tags of selected file(s)
    %view
    exiftool -duplicates -short1 -groupNames0:1 -time:all %s

-   view Create/Modify tags of selected file(s)
    %view
    exiftool -short1 -groupNames0:1 -FileModifyDate -CreateDate -ModifyDate %s

--- Miscellaneous ---
    %view
    printf "Choose any from menu\n"

b   list block devices (lsblk) and file system usage (df)
    %view
    lsblk -p -o NAME,SIZE,FSUSE%%,TYPE,FSTYPE,FSVER,LABEL,UUID,MOUNTPOINT,PTTYPE,\
          PARTTYPE,PARTTYPENAME,PARTLABEL,PARTFLAGS --sort NAME --tree 2>/dev/null \
        || lsblk -p -f --sort NAME --tree
    # util-linux 2.35+ (2020-01-21) lsblk support all necessary columns to print
    printf "\n\n\n"
    df --human-readable --print-type | (sed -u 1q && sort) # skip first line and sort
    # df | head -n 1 && df | tail -n +2 | sort             # skip first line and sort

c   clear (echo 3) cached RAM (only as root)
    %view
    if [ $EUID -ne 0 ]; then
        printf "only as root\n"
        exit 1
    fi
    free --human && sync && echo 3 > /proc/sys/vm/drop_caches \
        && printf "\ncache dropped\n\n" && free --human

d   view Midnight Commander macro substitution (debug)
    %view
    printf "%%%%m   The current menu name\n     %m\n"
    printf "=====\n"
    printf "%%%%p   The current file name (without path, but pwd is its path)\n     %p\n"
    printf "%%%%f   The current file name (if non-local vfs, file will be copied locally \
            and %%%%f will be full path to it)\n     %f\n"
    printf "%%%%x   The extension of current file name\n     %x\n"
    printf "%%%%b   The current file name without extension\n     %b\n"
    printf "%%%%d   The current directory name (pwd, without trailing slash)\n     %d\n"
    printf "%%%%t   The currently tagged files (space separated list)\n     %t\n"
    printf "%%%%u   Similar to the %%%%t macro, but in addition the files are \
            untagged\n     DOES NOT SHOW IN THIS EXAMPLE\n"
    printf "%%%%s   The selected files (the tagged files if any, otherwise the current \
            file)\n     %s\n"
    printf "=====\n"
    printf "If the format letter is in uppercase (%%%%P, %%%%F, %%%%X, %%%%B, %%%%D, \
           %%%%T, %%%%U or %%%%S),\nit refers to the other (unselected, opposite) panel.\n"
    printf "=====\n"
    printf "%%%%S   The selected files in the other (unselected) panel\n     %S\n"
